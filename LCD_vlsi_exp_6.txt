library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity EXp006 is
    Port ( rst, clk : in  STD_LOGIC;
           lcd_RS : out  STD_LOGIC;
           din : in  STD_LOGIC_VECTOR (7 downto 0);
           LED : out  STD_LOGIC_VECTOR (7 downto 0);
           lcd_EN : out  STD_LOGIC;
           data_out : out  STD_LOGIC_VECTOR (7 downto 0));
end EXp006;

architecture Behavioral of EXp006 is
    signal div_count : std_logic_vector(20 downto 0);
    signal clk_new : std_logic;

    -- Define an enumerated type for state
    type state is (reset, fuction, mode, cur, clear, d0, d1, d2, fuction1, mode1, cur1, clear1, d01, d11, d21);
    signal pss, nx : state;
begin

    clk_DIV: process(clk, rst)
    begin
        if rst = '1' then
            div_count <= (others => '0');
        elsif rising_edge(clk) then
            div_count <= div_count + '1';
        end if;
    end process;

    clk_new <= div_count(20);

    p_state_transition: process (clk_new, rst)
    begin
        if rst = '1' then
            pss <= reset;
        elsif rising_edge(clk_new) then
            pss <= nx;
        end if;
    end process;

    LCD_working: process (pss)
    begin
        case pss is
            when reset =>
                lcd_RS <= '0';
                lcd_EN <= '1';
                data_out <= "00111100"; --3Ch
                nx <= fuction;
            when fuction =>
                lcd_RS <= '0';
                lcd_EN <= '1';
                data_out <= "00111100"; --3Ch
                nx <= fuction1;
            when fuction1 =>
                lcd_RS <= '0';
                lcd_EN <= '0';
                data_out <= "00111100"; --3Ch
                nx <= mode;
            when mode =>
                lcd_RS <= '0';
                lcd_EN <= '1';
                data_out <= "00000110"; --06h
                nx <= mode1;
            when mode1 =>
                lcd_RS <= '0';
                lcd_EN <= '0';
                data_out <= "00000110"; --06h
                nx <= cur;
            -- Continue with other cases similarly
            -- (omitting repetitive assignments for brevity)

            when others =>
                null;
        end case;
    end process;
end Behavioral;


----------------------------------------------------------------------------------testbench-----------------------------------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--USE ieee.numeric_std.ALL;
ENTITY LCDTEST IS
END LCDTEST;
ARCHITECTURE behavior OF LCDTEST IS
-- Component Declaration for the Unit Under Test (UUT)
COMPONENT LCD_SIMPLE_Practice
PORT(
rst : IN std_logic;
clk : IN std_logic;
lcd_RS : OUT std_logic;
lcd_EN : OUT std_logic;
data_out : OUT std_logic_vector(7 downto 0)
);
END COMPONENT;
--Inputs
signal rst : std_logic := '0';
signal clk : std_logic := '0';
--Outputs
signal lcd_RS : std_logic;
signal lcd_EN : std_logic;
signal data_out : std_logic_vector(7 downto 0);
-- Clock period definitions
constant clk_period : time := 10 ns;
BEGIN
-- Instantiate the Unit Under Test (UUT)
uut: LCD_SIMPLE_Practice PORT MAP (
rst => rst,
clk => clk,
lcd_RS => lcd_RS,
lcd_EN => lcd_EN,
data_out => data_out
);
-- Clock process definitions
clk_process :process
begin
clk <= '0';
wait for clk_period/2;
clk <= '1';
wait for clk_period/2;
end process;
-- Stimulus process
stim_proc: process
begin
rst<='1';
-- hold reset state for 100 ns.
wait for 100 ns;
rst<='0';
--din<="00101010";
wait for 100 ns;
rst<='1';
--din<="00101010";
-- hold reset state for 100 ns.
rst<='0';
--din<="00101010";
wait for 100 ns;
rst<='1';
--din<="00111111";
--hold reset state for 100 ns.
wait for 100 ns;
rst<='0';
wait for 100 ns;
-- insert stimulus here
wait;
end process;
END;
